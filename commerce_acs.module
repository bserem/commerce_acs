<?php
/**
 * @file
 * Defines an example shipping method for testing and development.
 */
module_load_include('inc', 'commerce_acs', 'includes/commerce_acs.api');
module_load_include('inc', 'commerce_acs', 'includes/commerce_acs.rules');
module_load_include('inc', 'commerce_acs', 'includes/commerce_acs.rules_defaults');
/**
 * Implements hook_menu().
 */

function commerce_acs_menu() {
  $items = array();
  $items['admin/commerce/config/shipping/methods/acs/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure the ACS shipping method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'commerce_acs_settings_form'
    ) ,
    'access arguments' => array(
      'administer shipping'
    ) ,
    'file' => 'includes/commerce_acs.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );
  $items['admin/commerce/orders/%commerce_order/ACS'] = array(
    'title' => 'ACS Shipping',
    'page callback' => 'commerce_acs_order_shipping',
    'page arguments' => array(
      3
    ) ,
    'access arguments' => array(
      'administer commerce_order entities'
    ) ,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'parent' => 'admin/commerce/orders/%commerce_order',
    'file' => 'includes/commerce_acs.admin.inc',
  );
  return $items;
}
/**
 * Implements hook_commerce_shipping_method_info().
 */

function commerce_acs_commerce_shipping_method_info() {
  $shipping_methods = array();
  $shipping_methods['acs'] = array(
    'title' => t('ACS Method') ,
    'description' => t('Defines ACS rate.') ,
  );
  return $shipping_methods;
}
/**
 * Implements hook_commerce_shipping_service_info().
 */

function commerce_acs_commerce_shipping_service_info() {
  $shipping_services = array();
  $shipping_services['acs'] = array(
    'title' => t('ACS shipping service') ,
    'description' => t('ACS Shipping service.') ,
    'display_title' => t('Shipping') ,
    'shipping_method' => 'acs',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_acs_rate',
      'details_form' => 'commerce_acs_details_form',
      'details_form_validate' => 'commerce_acs_details_form_validate',
      'details_form_submit' => 'commerce_acs_details_form_submit',
    ) ,
  );
  return $shipping_services;
}
/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */

function commerce_acs_rate($shipping_service, $order) {
  $base_price = commerce_acs_price_by_volume($order);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  if ($base_price) {
    $rate = array(
      'amount' => $base_price,
      'currency_code' => $order_wrapper->commerce_order_total->currency_code->value() ,
      'data' => array() ,
    );
  }
  else {
    $rate = array(
      'amount' => 0,
      'currency_code' => $order_wrapper->commerce_order_total->currency_code->value() ,
      'data' => array() ,
    );
  }
  
  if (!empty($rate)) {
    // Cache the calculated rates for subsequent requests.
    commerce_shipping_rates_cache_set('acs', $order, $rate);
  }
  else {
    // If request fails, cache an empty array to prevent multiple failed
    // requests since all additional requests will fail as well.
    commerce_shipping_rates_cache_set('acs', $order, array());
  }
  return $rate;
}
/**
 * Shipping service callback: returns the example shipping service details form.
 */

function commerce_acs_details_form($pane_form, &$pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();
  $pane_values['service_details']+= array(
    'saturday' => '',
    'morning' => '',
  );
  $form['saturday'] = array(
    '#type' => 'checkbox',
    '#title' => t('Saturday delivery') ,
    '#description' => t('Saturday delivery.') ,
    '#default_value' => $pane_values['service_details']['saturday'],
    '#ajax' => array(
      'callback' => 'commerce_shipping_recalculate_services_refresh',
      'wrapper' => 'commerce-shipping-service-ajax-wrapper',
    ) ,
  );
  $form['morning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Morning delivery') ,
    '#description' => t('Morning delivery.') ,
    '#default_value' => $pane_values['service_details']['morning'],
    '#ajax' => array(
      'callback' => 'commerce_shipping_recalculate_services_refresh',
      'wrapper' => 'commerce-shipping-service-ajax-wrapper',
    ) ,
  );
  return $form;
}
/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */

function commerce_acs_details_form_submit($details_form, $details_values, $line_item) {
  
  if ($line_item->order_id) {
    $order = commerce_order_load($line_item->order_id);
  }
  
  if ($details_values['saturday']) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $saturdayprice = commerce_acs_price_by_volume($order, '5Σ',true);
    $saturday_price = array(
      'amount' => $saturdayprice,
      'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value() ,
      'data' => array() ,
    );
    $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 1500;
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add($line_item_wrapper->commerce_unit_price->value() , 'acs_commerce_saturday_delivery', $saturday_price, TRUE, FALSE);
  }
  
  if ($details_values['morning']) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $morningprice = commerce_acs_price_by_volume($order, '1Σ',true);
    $morning_price = array(
      'amount' => $morningprice,
      'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value() ,
      'data' => array() ,
    );
    $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 1500;
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add($line_item_wrapper->commerce_unit_price->value() , 'acs_commerce_morning_delivery', $morning_price, TRUE, FALSE);
  }
}
/**
 * Implements hook_commerce_price_component_type_info().
 */

function commerce_acs_commerce_price_component_type_info() {
  return array(
    'acs_commerce_saturday_delivery' => array(
      'title' => t('Saturday delivery') ,
      'weight' => 19,
    ) ,
    'acs_commerce_morning_delivery' => array(
      'title' => t('Morning delivery') ,
      'weight' => 20,
    ) ,
    'acs_cod_fee' => array(
      'title' => t('Cash on delivery Acs') ,
      'weight' => 21,
    ) ,
  );
}
